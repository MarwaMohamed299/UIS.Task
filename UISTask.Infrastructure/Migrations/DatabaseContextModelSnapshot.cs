// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UISTask.Infrastructure.Data.Context;

#nullable disable

namespace UISTask.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UISTask.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a694e664-6368-4179-8e84-7246a7ec0779"),
                            CurrentQuantity = 100,
                            InitialQuantity = 100,
                            Price = 10.5m,
                            ProductName = "Product A",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = new Guid("6c9e93fa-2eba-4b96-8cc2-2a3a6f2cb8ef"),
                            CurrentQuantity = 200,
                            InitialQuantity = 200,
                            Price = 2.0m,
                            ProductName = "Product B",
                            Unit = "pieces"
                        },
                        new
                        {
                            Id = new Guid("fd458913-483b-4832-b144-f4971924db41"),
                            CurrentQuantity = 50,
                            InitialQuantity = 50,
                            Price = 5.0m,
                            ProductName = "Product C",
                            Unit = "liters"
                        });
                });

            modelBuilder.Entity("UISTask.Domain.Entities.ProductTransaction", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("ProductTransactions");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("a694e664-6368-4179-8e84-7246a7ec0779"),
                            TransactionId = new Guid("f0ce4bc0-eae3-4292-b2ab-af0f47b19059"),
                            Quantity = 10,
                            TotalPrice = 105.0m,
                            Unit = ""
                        },
                        new
                        {
                            ProductId = new Guid("6c9e93fa-2eba-4b96-8cc2-2a3a6f2cb8ef"),
                            TransactionId = new Guid("f0ce4bc0-eae3-4292-b2ab-af0f47b19059"),
                            Quantity = 20,
                            TotalPrice = 40.0m,
                            Unit = ""
                        },
                        new
                        {
                            ProductId = new Guid("a694e664-6368-4179-8e84-7246a7ec0779"),
                            TransactionId = new Guid("e0b25fd9-f1c3-4915-a552-1468c3f54673"),
                            Quantity = 5,
                            TotalPrice = 52.5m,
                            Unit = ""
                        },
                        new
                        {
                            ProductId = new Guid("fd458913-483b-4832-b144-f4971924db41"),
                            TransactionId = new Guid("2af574f7-005c-4473-850e-60c22c5b1724"),
                            Quantity = 15,
                            TotalPrice = 75.0m,
                            Unit = ""
                        },
                        new
                        {
                            ProductId = new Guid("6c9e93fa-2eba-4b96-8cc2-2a3a6f2cb8ef"),
                            TransactionId = new Guid("4b5287d3-0933-4f49-8c2b-16fd1f62b177"),
                            Quantity = 30,
                            TotalPrice = 60.0m,
                            Unit = ""
                        },
                        new
                        {
                            ProductId = new Guid("fd458913-483b-4832-b144-f4971924db41"),
                            TransactionId = new Guid("84a7ebf5-3175-4107-a35e-34ee26e1b1d6"),
                            Quantity = 25,
                            TotalPrice = 125.0m,
                            Unit = ""
                        });
                });

            modelBuilder.Entity("UISTask.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0ce4bc0-eae3-4292-b2ab-af0f47b19059"),
                            Date = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e0b25fd9-f1c3-4915-a552-1468c3f54673"),
                            Date = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2af574f7-005c-4473-850e-60c22c5b1724"),
                            Date = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4b5287d3-0933-4f49-8c2b-16fd1f62b177"),
                            Date = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("84a7ebf5-3175-4107-a35e-34ee26e1b1d6"),
                            Date = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("UISTask.Domain.Entities.ProductTransaction", b =>
                {
                    b.HasOne("UISTask.Domain.Entities.Product", "Product")
                        .WithMany("ProductTransaction")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UISTask.Domain.Entities.Transaction", "Transaction")
                        .WithMany("ProductTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("UISTask.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductTransaction");
                });

            modelBuilder.Entity("UISTask.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("ProductTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
